// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

/**
 * An empty JSON object
 */
type wellKnownEmpty = Record<never, never>;

/**
 * Encoded using RFC 3339, where generated output will always be Z-normalized
 * and uses 0, 3, 6 or 9 fractional digits.
 * Offsets other than "Z" are also accepted.
 */
type wellKnownTimestamp = string;

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

/**
 * A simple service definition.
 */
export interface UserService {
  /**
   * Gets a user by ID.
   */
  GetUser(request: GetUserRequest): Promise<UserResponse>;
  /**
   * Creates a new user.
   */
  CreateUser(request: CreateUserRequest): Promise<UserResponse>;
  DeleteUser(request: DeleteUserRequest): Promise<wellKnownEmpty>;
}

export function createUserServiceClient(
  handler: RequestHandler
): UserService {
  return {
    GetUser(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/${request.id}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "UserService",
        method: "GetUser",
      }) as Promise<User>;
    },
    CreateUser(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/users`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.user ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "UserService",
        method: "CreateUser",
      }) as Promise<User>;
    },
    DeleteUser(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/${request.id}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "UserService",
        method: "DeleteUser",
      }) as Promise<wellKnownEmpty>;
    },
  };
}
/**
 * A simple message representing a user.
 */
export type UserResponse = {
  /**
   * Behaviors: OUTPUT_ONLY
   */
  id: number;
  /**
   * Behaviors: REQUIRED
   */
  name: string;
  email: string;
  /**
   * Behaviors: OPTIONAL
   */
  favoriteColor: string;
  /**
   * Behaviors: OUTPUT_ONLY
   */
  createdDate: wellKnownTimestamp;
};

/**
 * Request message for GetUser.
 */
export type GetUserRequest = {
  id: number;
};

/**
 * Request message for CreateUser.
 */
export type CreateUserRequest = {
  /**
   * Behaviors: REQUIRED
   */
  user: UserRequest;
};

/**
 * A simple message representing a user.
 */
export type UserRequest = {
  /**
   * Behaviors: REQUIRED
   */
  name: string;
  email: string;
  /**
   * Behaviors: OPTIONAL
   */
  favoriteColor?: string;
};

/**
 * Request message for DeleteUser.
 */
export type DeleteUserRequest = {
  /**
   * Behaviors: REQUIRED
   */
  id: number;
};


// @@protoc_insertion_point(typescript-http-eof)
