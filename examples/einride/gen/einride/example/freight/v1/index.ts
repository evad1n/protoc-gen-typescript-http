// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

/**
 * In JSON, a field mask is encoded as a single string where paths are
 * separated by a comma. Fields name in each path are converted
 * to/from lower-camel naming conventions.
 * As an example, consider the following message declarations:
 *
 *     message Profile {
 *       User user = 1;
 *       Photo photo = 2;
 *     }
 *     message User {
 *       string display_name = 1;
 *       string address = 2;
 *     }
 *
 * In proto a field mask for `Profile` may look as such:
 *
 *     mask {
 *       paths: "user.display_name"
 *       paths: "photo"
 *     }
 *
 * In JSON, the same mask is represented as below:
 *
 *     {
 *       mask: "user.displayName,photo"
 *     }
 */
type wellKnownFieldMask = string;

/**
 * Encoded using RFC 3339, where generated output will always be Z-normalized
 * and uses 0, 3, 6 or 9 fractional digits.
 * Offsets other than "Z" are also accepted.
 */
type wellKnownTimestamp = string;

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

/**
 * Request message for FreightService.UpdateShipper.
 */
export type UpdateShipperRequest__Request = {
  /**
   * The shipper to update with. The name must match or be empty.
   * The shipper's `name` field is used to identify the shipper to be updated.
   * Format: shippers/{shipper}
   * 
   * Behaviors: REQUIRED
   */
  shipper: Shipper;
  /**
   * The list of fields to be updated.
   */
  updateMask: wellKnownFieldMask;
};

/**
 * Request message for FreightService.DeleteShipper.
 */
export type DeleteShipperRequest__Request = {
  /**
   * The resource name of the shipper to delete.
   * Format: shippers/{shipper}
   * 
   * Behaviors: REQUIRED
   */
  name: string;
};

/**
 * Response message for FreightService.ListShipments.
 */
export type ListShipmentsResponse__Response = {
  /**
   * The list of shipments.
   */
  shipments: Shipment[];
  /**
   * A token to retrieve next page of results.  Pass this value in the
   * [ListShipmentsRequest.page_token][einride.example.freight.v1.ListShipmentsRequest.page_token]
   * field in the subsequent call to `ListShipments` method to retrieve the next
   * page of results.
   */
  nextPageToken: string;
};

/**
 * Request message for FreightService.DeleteShipment.
 */
export type DeleteShipmentRequest__Request = {
  /**
   * The resource name of the shipment to delete.
   * Format: shippers/{shipper}/shipments/{shipment}
   * 
   * Behaviors: REQUIRED
   */
  name: string;
};

/**
 * Response message for FreightService.ListShippers.
 */
export type ListShippersResponse__Response = {
  /**
   * The list of shippers.
   */
  shippers: Shipper[];
  /**
   * A token to retrieve next page of results.  Pass this value in the
   * [ListShippersRequest.page_token][einride.example.freight.v1.ListShippersRequest.page_token]
   * field in the subsequent call to `ListShippers` method to retrieve the next
   * page of results.
   */
  nextPageToken: string;
};

/**
 * Request message for FreightService.ListSites.
 */
export type ListSitesRequest__Request = {
  /**
   * The resource name of the parent, which owns this collection of sites.
   * Format: shippers/{shipper}
   * 
   * Behaviors: REQUIRED
   */
  parent: string;
  /**
   * Requested page size. Server may return fewer sites than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /**
   * A token identifying a page of results the server should return.
   * Typically, this is the value of
   * [ListSitesResponse.next_page_token][einride.example.freight.v1.ListSitesResponse.next_page_token]
   * returned from the previous call to `ListSites` method.
   */
  pageToken: string;
};

/**
 * Response message for FreightService.ListSites.
 */
export type ListSitesResponse__Response = {
  /**
   * The list of sites.
   */
  sites: Site[];
  /**
   * A token to retrieve next page of results.  Pass this value in the
   * [ListSitesRequest.page_token][einride.example.freight.v1.ListSitesRequest.page_token]
   * field in the subsequent call to `ListSites` method to retrieve the next
   * page of results.
   */
  nextPageToken: string;
};

/**
 * An object that represents a latitude/longitude pair. This is expressed as a
 * pair of doubles to represent degrees latitude and degrees longitude. Unless
 * specified otherwise, this must conform to the
 * <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
 * standard</a>. Values must be within normalized ranges.
 */
export type googletype_LatLng = {
  /**
   * The latitude in degrees. It must be in the range [-90.0, +90.0].
   */
  latitude: number;
  /**
   * The longitude in degrees. It must be in the range [-180.0, +180.0].
   */
  longitude: number;
};

/**
 * Request message for FreightService.GetSite.
 */
export type GetSiteRequest__Request = {
  /**
   * The resource name of the site to retrieve.
   * Format: shippers/{shipper}/sites/{site}
   * 
   * Behaviors: REQUIRED
   */
  name: string;
};

/**
 * Request message for FreightService.CreateSite.
 */
export type CreateSiteRequest__Request = {
  /**
   * The resource name of the parent shipper for which this site will be created.
   * Format: shippers/{shipper}
   * 
   * Behaviors: REQUIRED
   */
  parent: string;
  /**
   * The site to create.
   * 
   * Behaviors: REQUIRED
   */
  site: Site;
};

/**
 * Request message for FreightService.UpdateSite.
 */
export type UpdateSiteRequest__Request = {
  /**
   * The site to update with. The name must match or be empty.
   * The site's `name` field is used to identify the site to be updated.
   * Format: shippers/{shipper}/sites/{site}
   * 
   * Behaviors: REQUIRED
   */
  site: Site;
  /**
   * The list of fields to be updated.
   */
  updateMask: wellKnownFieldMask;
};

/**
 * Request message for FreightService.DeleteSite.
 */
export type DeleteSiteRequest__Request = {
  /**
   * The resource name of the site to delete.
   * Format: shippers/{shipper}/sites/{site}
   * 
   * Behaviors: REQUIRED
   */
  name: string;
};

/**
 * Request message for FreightService.UpdateShipment.
 */
export type UpdateShipmentRequest__Request = {
  /**
   * The shipment to update with. The name must match or be empty.
   * The shipment's `name` field is used to identify the shipment to be updated.
   * Format: shippers/{shipper}/shipments/{shipment}
   * 
   * Behaviors: REQUIRED
   */
  shipment: Shipment;
  /**
   * The list of fields to be updated.
   */
  updateMask: wellKnownFieldMask;
};

/**
 * A shipment represents transportation of goods between an origin
 * [site][einride.example.freight.v1.Site] and a destination
 * [site][einride.example.freight.v1.Site].
 */
export type Shipment__Response = {
  /**
   * The resource name of the shipment.
   */
  name: string;
  /**
   * The creation timestamp of the shipment.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  createTime: wellKnownTimestamp;
  /**
   * The last update timestamp of the shipment.
   * Updated when create/update/delete operation is shipment.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  updateTime: wellKnownTimestamp;
  /**
   * The deletion timestamp of the shipment.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  deleteTime: wellKnownTimestamp;
  /**
   * The resource name of the origin site of the shipment.
   * Format: shippers/{shipper}/sites/{site}
   * 
   * Behaviors: REQUIRED
   */
  originSite: string;
  /**
   * The resource name of the destination site of the shipment.
   * Format: shippers/{shipper}/sites/{site}
   * 
   * Behaviors: REQUIRED
   */
  destinationSite: string;
  /**
   * The earliest pickup time of the shipment at the origin site.
   * 
   * Behaviors: REQUIRED
   */
  pickupEarliestTime: wellKnownTimestamp;
  /**
   * The latest pickup time of the shipment at the origin site.
   * 
   * Behaviors: REQUIRED
   */
  pickupLatestTime: wellKnownTimestamp;
  /**
   * The earliest delivery time of the shipment at the destination site.
   * 
   * Behaviors: REQUIRED
   */
  deliveryEarliestTime: wellKnownTimestamp;
  /**
   * The latest delivery time of the shipment at the destination site.
   * 
   * Behaviors: REQUIRED
   */
  deliveryLatestTime: wellKnownTimestamp;
  /**
   * The line items of the shipment.
   */
  lineItems: LineItem[];
  /**
   * Annotations of the shipment.
   */
  annotations: { [key: string]: string };
};

/**
 * A shipment line item.
 */
export type LineItem = {
  /**
   * The title of the line item.
   */
  title: string;
  /**
   * The quantity of the line item.
   */
  quantity: number;
  /**
   * The weight of the line item in kilograms.
   */
  weightKg: number;
  /**
   * The volume of the line item in cubic meters.
   */
  volumeM3: number;
};

/**
 * Request message for FreightService.CreateShipper.
 */
export type CreateShipperRequest__Request = {
  /**
   * The shipper to create.
   * 
   * Behaviors: REQUIRED
   */
  shipper: Shipper;
};

/**
 * Request message for FreightService.GetShipment.
 */
export type GetShipmentRequest__Request = {
  /**
   * The resource name of the shipment to retrieve.
   * Format: shippers/{shipper}/shipments/{shipment}
   * 
   * Behaviors: REQUIRED
   */
  name: string;
};

/**
 * Request message for FreightService.ListShipments.
 */
export type ListShipmentsRequest__Request = {
  /**
   * The resource name of the parent, which owns this collection of shipments.
   * Format: shippers/{shipper}
   * 
   * Behaviors: REQUIRED
   */
  parent: string;
  /**
   * Requested page size. Server may return fewer shipments than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /**
   * A token identifying a page of results the server should return.
   * Typically, this is the value of
   * [ListShipmentsResponse.next_page_token][einride.example.freight.v1.ListShipmentsResponse.next_page_token]
   * returned from the previous call to `ListShipments` method.
   */
  pageToken: string;
};

/**
 * Request message for FreightService.CreateShipment.
 */
export type CreateShipmentRequest__Request = {
  /**
   * The resource name of the parent shipper for which this shipment will be created.
   * Format: shippers/{shipper}
   * 
   * Behaviors: REQUIRED
   */
  parent: string;
  /**
   * The shipment to create.
   * 
   * Behaviors: REQUIRED
   */
  shipment: Shipment;
};

/**
 * A shipper is a supplier or owner of goods to be transported.
 */
export type Shipper__Response = {
  /**
   * The resource name of the shipper.
   */
  name: string;
  /**
   * The creation timestamp of the shipper.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  createTime: wellKnownTimestamp;
  /**
   * The last update timestamp of the shipper.
   * Updated when create/update/delete operation is performed.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  updateTime: wellKnownTimestamp;
  /**
   * The deletion timestamp of the shipper.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  deleteTime: wellKnownTimestamp;
  /**
   * The display name of the shipper.
   * 
   * Behaviors: REQUIRED
   */
  displayName: string;
};

/**
 * A site is a node in a [shipper][einride.example.freight.v1.Shipper]'s
 * transport network.
 */
export type Site__Response = {
  /**
   * The resource name of the site.
   */
  name: string;
  /**
   * The creation timestamp of the site.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  createTime: wellKnownTimestamp;
  /**
   * The last update timestamp of the site.
   * Updated when create/update/delete operation is performed.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  updateTime: wellKnownTimestamp;
  /**
   * The deletion timestamp of the site.
   * 
   * Behaviors: OUTPUT_ONLY
   */
  deleteTime: wellKnownTimestamp;
  /**
   * The display name of the site.
   * 
   * Behaviors: REQUIRED
   */
  displayName: string;
  /**
   * The geographic location of the site.
   */
  latLng: googletype_LatLng;
};

/**
 * Request message for FreightService.GetShipper.
 */
export type GetShipperRequest__Request = {
  /**
   * The resource name of the shipper to retrieve.
   * Format: shippers/{shipper}
   * 
   * Behaviors: REQUIRED
   */
  name: string;
};

/**
 * Request message for FreightService.ListShippers.
 */
export type ListShippersRequest__Request = {
  /**
   * Requested page size. Server may return fewer shippers than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /**
   * A token identifying a page of results the server should return.
   * Typically, this is the value of
   * [ListShippersResponse.next_page_token][einride.example.freight.v1.ListShippersResponse.next_page_token]
   * returned from the previous call to `ListShippers` method.
   */
  pageToken: string;
};

/**
 * This API represents a simple freight service.
 * It defines the following resource model:
 * - The API has a collection of [Shipper][einride.example.freight.v1.Shipper]
 * resources, named `shippers/*`
 * - Each Shipper has a collection of [Site][einride.example.freight.v1.Site]
 * resources, named `shippers/*/sites/*`
 * - Each Shipper has a collection of [Shipment][einride.example.freight.v1.Shipment]
 * resources, named `shippers/*/shipments/*`
 */
export interface FreightService {
  /**
   * Get a shipper.
   * See: https://google.aip.dev/131 (Standard methods: Get).
   */
  GetShipper(request: GetShipperRequest__Request): Promise<Shipper__Response>;
  /**
   * List shippers.
   * See: https://google.aip.dev/132 (Standard methods: List).
   */
  ListShippers(request: ListShippersRequest__Request): Promise<ListShippersResponse__Response>;
  /**
   * Create a shipper.
   * See: https://google.aip.dev/133 (Standard methods: Create).
   */
  CreateShipper(request: CreateShipperRequest__Request): Promise<Shipper__Response>;
  /**
   * Update a shipper.
   * See: https://google.aip.dev/134 (Standard methods: Update).
   */
  UpdateShipper(request: UpdateShipperRequest__Request): Promise<Shipper__Response>;
  /**
   * Delete a shipper.
   * See: https://google.aip.dev/135 (Standard methods: Delete).
   * See: https://google.aip.dev/164 (Soft delete).
   */
  DeleteShipper(request: DeleteShipperRequest__Request): Promise<Shipper__Response>;
  /**
   * Get a site.
   * See: https://google.aip.dev/131 (Standard methods: Get).
   */
  GetSite(request: GetSiteRequest__Request): Promise<Site__Response>;
  /**
   * List sites for a shipper.
   * See: https://google.aip.dev/132 (Standard methods: List).
   */
  ListSites(request: ListSitesRequest__Request): Promise<ListSitesResponse__Response>;
  /**
   * Create a site.
   * See: https://google.aip.dev/133 (Standard methods: Create).
   */
  CreateSite(request: CreateSiteRequest__Request): Promise<Site__Response>;
  /**
   * Update a site.
   * See: https://google.aip.dev/134 (Standard methods: Update).
   */
  UpdateSite(request: UpdateSiteRequest__Request): Promise<Site__Response>;
  /**
   * Delete a site.
   * See: https://google.aip.dev/135 (Standard methods: Delete).
   * See: https://google.aip.dev/164 (Soft delete).
   */
  DeleteSite(request: DeleteSiteRequest__Request): Promise<Site__Response>;
  /**
   * Get a shipment.
   * See: https://google.aip.dev/131 (Standard methods: Get).
   */
  GetShipment(request: GetShipmentRequest__Request): Promise<Shipment__Response>;
  /**
   * List shipments for a shipper.
   * See: https://google.aip.dev/132 (Standard methods: List).
   */
  ListShipments(request: ListShipmentsRequest__Request): Promise<ListShipmentsResponse__Response>;
  /**
   * Create a shipment.
   * See: https://google.aip.dev/133 (Standard methods: Create).
   */
  CreateShipment(request: CreateShipmentRequest__Request): Promise<Shipment__Response>;
  /**
   * Update a shipment.
   * See: https://google.aip.dev/134 (Standard methods: Update).
   */
  UpdateShipment(request: UpdateShipmentRequest__Request): Promise<Shipment__Response>;
  /**
   * Delete a shipment.
   * See: https://google.aip.dev/135 (Standard methods: Delete).
   * See: https://google.aip.dev/164 (Soft delete).
   */
  DeleteShipment(request: DeleteShipmentRequest__Request): Promise<Shipment__Response>;
}

export function createFreightServiceClient(
  handler: RequestHandler
): FreightService {
  return {
    GetShipper(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `v1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "FreightService",
        method: "GetShipper",
      }) as Promise<Shipper>;
    },
    ListShippers(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/shippers`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "FreightService",
        method: "ListShippers",
      }) as Promise<ListShippersResponse>;
    },
    CreateShipper(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/shippers`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.shipper ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "FreightService",
        method: "CreateShipper",
      }) as Promise<Shipper>;
    },
    UpdateShipper(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.shipper?.name) {
        throw new Error("missing required field request.shipper.name");
      }
      const path = `v1/${request.shipper.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.shipper ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "FreightService",
        method: "UpdateShipper",
      }) as Promise<Shipper>;
    },
    DeleteShipper(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `v1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "FreightService",
        method: "DeleteShipper",
      }) as Promise<Shipper>;
    },
    GetSite(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `v1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "FreightService",
        method: "GetSite",
      }) as Promise<Site>;
    },
    ListSites(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `v1/${request.parent}/sites`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "FreightService",
        method: "ListSites",
      }) as Promise<ListSitesResponse>;
    },
    CreateSite(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `v1/${request.parent}/sites`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.site ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "FreightService",
        method: "CreateSite",
      }) as Promise<Site>;
    },
    UpdateSite(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.site?.name) {
        throw new Error("missing required field request.site.name");
      }
      const path = `v1/${request.site.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.site ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "FreightService",
        method: "UpdateSite",
      }) as Promise<Site>;
    },
    DeleteSite(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `v1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "FreightService",
        method: "DeleteSite",
      }) as Promise<Site>;
    },
    GetShipment(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `v1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "FreightService",
        method: "GetShipment",
      }) as Promise<Shipment>;
    },
    ListShipments(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `v1/${request.parent}/shipments`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "FreightService",
        method: "ListShipments",
      }) as Promise<ListShipmentsResponse>;
    },
    CreateShipment(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `v1/${request.parent}/shipments`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.shipment ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "FreightService",
        method: "CreateShipment",
      }) as Promise<Shipment>;
    },
    UpdateShipment(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.shipment?.name) {
        throw new Error("missing required field request.shipment.name");
      }
      const path = `v1/${request.shipment.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.shipment ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "FreightService",
        method: "UpdateShipment",
      }) as Promise<Shipment>;
    },
    DeleteShipment(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `v1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "FreightService",
        method: "DeleteShipment",
      }) as Promise<Shipment>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
